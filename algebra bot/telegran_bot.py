from aiogram import Bot, types, executor, Dispatcher
from keyboard import in_start, in_mater, in_mater_v, in_mater_u, in_mater_e, in_mater_f, in_mater_d, in_mater_n, \
    in_histor, pod_end, in_res, ese
from config import TOKEN
import sqlite3 as sl
import logging
import random

bot = Bot(TOKEN)
db = Dispatcher(bot)

moder_id = ['1661617508']

left_right = {'v': [1, 8],
              'u': [1, 12],
              'n': [1, 8],
              'f': [1, 5],
              'd': [1, 5],
              'e': [1, 4]
              }

exercise_base = {}
sos = {}
callback_d = ''
ses = 0
message_counter = {}
conversation_status = {}


def callback_exp(call):
    ddb = sl.connect('database2.db')
    cur = ddb.cursor()

    cur.execute("""CREATE TABLE IF NOT EXISTS cold(
    cald TEXT PRIMARY KEY UNIQUE,
    text          TEXT,
    photo         TEXT,
    movie         TEXT,
    doc           TEXT,
    expert        TEXT
    )""")

    cur.execute("SELECT * FROM cold WHERE cald = ?", (call,))
    fetchall = cur.fetchall()
    sp = fetchall[0][-1].split('";"')
    mat = []
    for i in sp:
        if i is not None:

            tex = i.split('":"')
            mat.append(tex)
        else:
            mat.append(None)
    return mat


def callback_parametr(call):
    ddb = sl.connect('database2.db')
    cur = ddb.cursor()

    cur.execute("""CREATE TABLE IF NOT EXISTS cold(
    cald TEXT PRIMARY KEY UNIQUE,
    text          TEXT,
    photo         TEXT,
    movie         TEXT,
    doc           TEXT,
    expert        TEXT
    )""")

    cur.execute("SELECT * FROM cold WHERE cald = ?", (call,))

    return cur.fetchall()


help_text = '''
‚úÖ–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –º–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–æ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã" —Ç–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–¥–µ–ª –∏ —Ç–µ–º—É, 
—Ç–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞ –Ω–∏—Ö –ø—Ä–∞–∫—Ç–∏—á–µ—Å—Å–∫–∏–µ –∑–∞–¥–∞—á–∏.
‚ÜòÔ∏è–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–∫–ª–∞–¥–∫—É
"–ò—Å—Ç–æ—Ä–∏—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏", —Ç–æ–ª—å–∫–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ, –º–æ–∂–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å ‚ùó–û–ß–ï–ù–¨ –ü–†–ò–û–ß–ï–ù–¨ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã‚ùó. 
üí¨–ï—Å–ª–∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ –æ—à–∏–±–∫—É
–≤ –ø—Ä–æ–≥–∞–º–º–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏–Ω—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É" –∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—à–∏–±–∫–∏


/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/help - –ø–∞–º–∞–≥–∏—Ç–µ
'''


@db.message_handler(commands=['start'])
async def echo_message(msg: types.Message):
    await bot.send_message(msg.from_user.id,
                           text=f'''‚úÖ–ü—Ä–∏–≤–µ—Ç {msg.from_user.full_name}!‚úÖ
üñê–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–ª–≥–µ–±—Ä–µ

–î–∞–Ω–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É—á–∞—â–∏—Ö—Å—è 8-—Ö –∫–ª–∞—Å—Å–æ–≤, –∏–∑—É—á–∞—é—â–∏—Ö –∞–ª–≥–µ–±—Ä—É –Ω–∞ —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–º —É—Ä–æ–≤–Ω–µ.
–í —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω –∞–Ω–∞–ª–∏–∑ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –ø–æ —Ç–µ–º–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. –°–æ–∑–¥–∞–Ω —á–∞—Ç-–±–æ—Ç –ø–æ —Ç–µ–º–∞–º –∞–ª–≥–µ–±—Ä—ã 8-—Ö –∫–ª–∞—Å—Å–æ–≤
–∏–∑—É—á–∞—é—â–∏—Ö –∫—É—Ä—Å –∞–ª–≥–µ–±—Ä—ã –Ω–∞ —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–º —É—Ä–æ–≤–Ω–µ.

üìñ–£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–π —É—á–µ–±–Ω–∏–∫!
–ù–∞–ø–∏—à–∏—Ç–µ /book –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç

‚ö†Ô∏è–ù–∞–ø–∏—à–∏—Ç–µ - /help, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏''',
                           reply_markup=in_start)


@db.message_handler(commands=['help'])
async def echo_message(msg: types.Message):
    await bot.send_message(msg.from_user.id, text=help_text)


@db.message_handler(commands=['book'])
async def echo_message(msg: types.Message):
    with open('—Ç–≤–æ—Ä—á–µ—Å–∫–∞—è —Å–µ—Å—Å–∏—è.pdf', 'rb') as f:
        doc = f
        await bot.send_document(chat_id=msg.from_user.id, document=doc, caption='–£—á–µ–±–Ω–∏–∫ 8 –∫–ª–∞—Å—Å–∞')

@db.message_handler(lambda msg: str(msg.text).split()[0] in ["/adm"] and str(msg.from_user.id) in moder_id)
async def adm_pod(msg: types.Message):
    mat = msg.text.split()
    id_u = [int(mat[1]), 0000000000][len(mat) < 2]
    text = f"‚ö†Ô∏è–û—Ç –∞–¥–º–∏–Ω–∏–Ω—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞:\n{' '.join(mat[2:])}"
    await bot.send_message(id_u, text=text)


@db.message_handler(lambda msg: msg and conversation_status[msg.from_user.id] == 1)
async def podder(message):
    m = message.text
    for i in moder_id:
        await bot.send_message(i, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{message.from_user.id}* '{message.from_user.full_name}' —Å–æ–æ–±—â–∏–ª –≤–∞–º:\n{m}")
        await bot.send_message(message.from_user.id, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞–¥–º–∏–Ω–∞–º - '{m}'")


@db.message_handler(lambda msg: msg and exercise_base[msg.from_user.id][0] == 1)
async def podder(message):
    m = message.text
    await bot.send_message(message.from_user.id, f"""–í–∞—à –æ—Ç–≤–µ—Ç *{m}* –ø—Ä–∏–Ω—è—Ç!
–°—Ä–∞–≤–Ω–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Å –Ω–∞—à–∏–º.
–û—Ç–≤–µ—Ç: {exercise_base[message.from_user.id][1]}""", parse_mode='HTML', reply_markup=ese)



@db.callback_query_handler(text="resume3")
async def resu_back(call: types.CallbackQuery):
    ms = call.message.message_id
    for i in range(ms - message_counter[call.from_user.id] + 2, ms + 1):
        await bot.delete_message(call.from_user.id, i)


@db.callback_query_handler()
async def call_message_mater(call: types.CallbackQuery):
    try:
        global exercise_base, conversation_status, message_counter, sos
        exercise_base[call.from_user.id] = 0
        conversation_status[call.from_user.id] = 0
        global ses
        if call.data == 'histor':
            await call.message.edit_reply_markup(reply_markup=in_histor)
        elif call.data == 'resume2':
            cal = f'{sos[call.from_user.id]}_{left_right[sos[call.from_user.id]][1]}'
            matt = callback_exp(cal)
            rand = matt[random.randrange(1, len(matt))]
            await bot.send_message(call.from_user.id, rand[0])
            exercise_base[call.from_user.id] = [1, rand[1]]
        elif call.data == 'podd':
            await call.message.edit_reply_markup(reply_markup=pod_end)
            await bot.send_message(call.from_user.id,
                                   text="üí¨ –ü–∏—à–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä")
            conversation_status[call.from_user.id] = 1
        elif call.data == 'mater':
            await call.message.edit_reply_markup(reply_markup=in_mater)
        elif call.data == 'nazad1':
            await call.message.edit_reply_markup(reply_markup=in_start)
        elif call.data == 'nazad2':
            await call.message.edit_reply_markup(reply_markup=in_mater)
        elif call.data.startswith('mater_'):
            if call.data == 'mater_v':
                await call.message.edit_reply_markup(reply_markup=in_mater_v)
            elif call.data == 'mater_u':
                await call.message.edit_reply_markup(reply_markup=in_mater_u)
            elif call.data == 'mater_e':
                await call.message.edit_reply_markup(reply_markup=in_mater_e)
            elif call.data == 'mater_d':
                await call.message.edit_reply_markup(reply_markup=in_mater_d)
            elif call.data == 'mater_f':
                await call.message.edit_reply_markup(reply_markup=in_mater_f)
            elif call.data == 'mater_n':
                await call.message.edit_reply_markup(reply_markup=in_mater_n)
        elif call.data == "pod_end":
            conversation_status[call.from_user.id] = 1
        elif call.data[1] == '_':
            sos[call.from_user.id] = call.data.split("_")[0]
            count = 1
            global callback_d
            callback_d = call.data
            message_counter[call.from_user.id] = 0
            message_counter[call.from_user.id] += count
            id_user = call.from_user.id
            for values in callback_parametr(call.data):
                tex, photo, movie, doc = values[1], values[2], values[3], values[4]
                await bot.send_message(id_user, text=tex)
                message_counter[call.from_user.id] += count
                if photo is not None:
                    await bot.send_message(id_user, text="–ê –≤–æ—Ç –∏ —Ñ–æ—Ç–æ—á–∫–∏: ")
                    message_counter[call.from_user.id] += count
                    for i in photo.split(', '):
                        await bot.send_photo(id_user, photo=i)
                        message_counter[call.from_user.id] += count
                if movie is not None:
                    await bot.send_message(id_user, text="–ò –≤–∏–¥–µ–æ: ")
                    message_counter[call.from_user.id] += count
                    for i in movie.split(', '):
                        await bot.send_message(id_user, i)
                        message_counter[call.from_user.id] += count
                if doc is not None:
                    await bot.send_message(id_user, text="–ò –¥–æ–∫—É–º–µ–Ω—Ç—ã: ")
                    message_counter[call.from_user.id] += count
                    for i in doc.split():
                        await bot.send_document(id_user, i)
                        message_counter[call.from_user.id] += count
                await bot.send_message(id_user, text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ', reply_markup=in_res)
                message_counter[call.from_user.id] += count
    except Exception:
        print("–ü—Ä–æ–±–ª–µ–º–∫–∞")


while True:
    try:
        executor.start_polling(dispatcher=db, skip_updates=True)
    except (KeyboardInterrupt, SystemExit):
        break
    except Exception:
        logging.exception('polling error')
